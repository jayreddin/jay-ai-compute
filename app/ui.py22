import threading
import webbrowser
from multiprocessing import Queue
from pathlib import Path
from datetime import datetime
from typing import Union

# import speech_recognition as sr
import ttkbootstrap as ttk
from PIL import Image, ImageTk

# Desktop Control Libraries
import pyautogui
import pyperclip
import pygetwindow as gw
import pymsgbox

from llm import DEFAULT_MODEL_NAME
from utils.settings import Settings
from version import version


def open_link(url) -> None:
    webbrowser.open_new(url)


class UI:
    def __init__(self):
        self.main_window = self.MainWindow()

    def run(self) -> None:
        self.main_window.mainloop()

    def display_current_status(self, text: str):
        self.main_window.update_message(text)

    class AdvancedSettingsWindow(ttk.Toplevel):
        """
        Self-contained settings sub-window for the UI
        """

        def __init__(self, parent):
            super().__init__(parent)
            self.title('Advanced Settings')
            self.minsize(300, 300)
            self.settings = Settings()
            self.create_widgets()

            # Populate UI
            settings_dict = self.settings.get_dict()

            if 'base_url' in settings_dict:
                self.base_url_entry.insert(0, settings_dict['base_url'])
            if 'model' in settings_dict:
                self.model_entry.insert(0, settings_dict['model'])
                self.model_var.set(settings_dict.get('model', 'custom'))
            else:
                self.model_entry.insert(0, DEFAULT_MODEL_NAME)
                self.model_var.set(DEFAULT_MODEL_NAME)

        def create_widgets(self) -> None:
            # Radio buttons for model selection
            ttk.Label(self, text='Select Model:', bootstyle="primary").pack(pady=10, padx=10)
            self.model_var = ttk.StringVar(value='custom')  # default selection

            # Create a frame to hold the radio buttons
            radio_frame = ttk.Frame(self)
            radio_frame.pack(padx=20, pady=10)  # Add padding around the frame

            models = [
                ('GPT-4o (Default. Medium-Accurate, Medium-Fast)', 'gpt-4o'),
                ('GPT-4o-mini (Cheapest, Fastest)', 'gpt-4o-mini'),
                ('GPT-4v (Deprecated. Most-Accurate, Slowest)', 'gpt-4-vision-preview'),
                ('GPT-4-Turbo (Least Accurate, Fast)', 'gpt-4-turbo'),
                ('Custom (Specify Settings Below)', 'custom')
            ]
            for text, value in models:
                ttk.Radiobutton(radio_frame, text=text, value=value, variable=self.model_var, bootstyle="info").pack(
                    anchor=ttk.W, pady=5)

            label_base_url = ttk.Label(self, text='Custom OpenAI-Like API Model Base URL', bootstyle="secondary")
            label_base_url.pack(pady=10)

            # Entry for Base URL
            self.base_url_entry = ttk.Entry(self, width=30)
            self.base_url_entry.pack()

            # Model Label
            label_model = ttk.Label(self, text='Custom Model Name:', bootstyle="secondary")
            label_model.pack(pady=10)

            # Entry for Model
            self.model_entry = ttk.Entry(self, width=30)
            self.model_entry.pack()

            # Save Button
            save_button = ttk.Button(self, text='Save Settings', bootstyle="success", command=self.save_button)
            save_button.pack(pady=20)

        def save_button(self) -> None:
            base_url = self.base_url_entry.get().strip()
            model = self.model_var.get() if self.model_var.get() != 'custom' else self.model_entry.get().strip()
            settings_dict = {
                'base_url': base_url,
                'model': model,
            }

            self.settings.save_settings_to_file(settings_dict)
            self.destroy()

    class SettingsWindow(ttk.Toplevel):
        """
        Self-contained settings sub-window for the UI
        """

        def __init__(self, parent):
            super().__init__(parent)
            self.title('Settings')
            self.minsize(300, 450)
            self.available_themes = ['darkly', 'cyborg', 'journal', 'solar', 'superhero']
            self.create_widgets()

            self.settings = Settings()

            # Populate UI
            settings_dict = self.settings.get_dict()

            if 'api_key' in settings_dict:
                self.api_key_entry.insert(0, settings_dict['api_key'])
            if 'default_browser' in settings_dict:
                self.browser_combobox.set(settings_dict['default_browser'])
            if 'play_ding_on_completion' in settings_dict:
                self.play_ding.set(1 if settings_dict['play_ding_on_completion'] else 0)
            if 'custom_llm_instructions':
                self.llm_instructions_text.insert('1.0', settings_dict['custom_llm_instructions'])
            self.theme_combobox.set(settings_dict.get('theme', 'superhero'))

        def create_widgets(self) -> None:
            # API Key Widgets
            label_api = ttk.Label(self, text='OpenAI API Key:', bootstyle="info")
            label_api.pack(pady=10)
            self.api_key_entry = ttk.Entry(self, width=30)
            self.api_key_entry.pack()

            # Label for Browser Choice
            label_browser = ttk.Label(self, text='Choose Default Browser:', bootstyle="info")
            label_browser.pack(pady=10)

            # Dropdown for Browser Choice
            self.browser_var = ttk.StringVar()
            self.browser_combobox = ttk.Combobox(self, textvariable=self.browser_var,
                                                 values=['Safari', 'Firefox', 'Chrome'])
            self.browser_combobox.pack(pady=5)
            self.browser_combobox.set('Choose Browser')

            # Label for Custom LLM Guidance
            label_llm = ttk.Label(self, text='Custom LLM Guidance:', bootstyle="info")
            label_llm.pack(pady=10)

            # Text Box for Custom LLM Instructions
            self.llm_instructions_text = ttk.Text(self, height=10, width=50)
            self.llm_instructions_text.pack(padx=(10, 10), pady=(0, 10))

            # Checkbox for "Play Ding" option
            self.play_ding = ttk.IntVar()
            play_ding_checkbox = ttk.Checkbutton(self, text="Play Ding on Completion", variable=self.play_ding,
                                                 bootstyle="round-toggle")
            play_ding_checkbox.pack(pady=10)

            # Theme Selection Widgets
            label_theme = ttk.Label(self, text='UI Theme:', bootstyle="info")
            label_theme.pack()
            self.theme_var = ttk.StringVar()
            self.theme_combobox = ttk.Combobox(self, textvariable=self.theme_var, values=self.available_themes,
                                               state="readonly")
            self.theme_combobox.pack(pady=5)
            self.theme_combobox.set('superhero')
            # Add binding for immediate theme change
            self.theme_combobox.bind('<<ComboboxSelected>>', self.on_theme_change)

            # Save Button
            save_button = ttk.Button(self, text='Save Settings', bootstyle="success", command=self.save_button)
            save_button.pack(pady=(10, 5))

            # Button to open Advanced Settings
            advanced_settings_button = ttk.Button(self, text='Advanced Settings', bootstyle="info",
                                                  command=self.open_advanced_settings)
            advanced_settings_button.pack(pady=(0, 10))

            # Hyperlink Label
            link_label = ttk.Label(self, text='Setup Instructions', bootstyle="primary")
            link_label.pack()
            link_label.bind('<Button-1>', lambda e: open_link(
                'https://github.com/AmberSahdev/Open-Interface?tab=readme-ov-file#setup-%EF%B8%8F'))

            # Check for updates Label
            update_label = ttk.Label(self, text='Check for Updates', bootstyle="primary")
            update_label.pack()
            update_label.bind('<Button-1>', lambda e: open_link(
                'https://github.com/AmberSahdev/Open-Interface/releases/latest'))

            # Version Label
            version_label = ttk.Label(self, text=f'Version: {str(version)}', font=('Helvetica', 10))
            version_label.pack(side="bottom", pady=10)

        def on_theme_change(self, event=None) -> None:
            # Apply theme immediately when selected
            theme = self.theme_var.get()
            self.master.change_theme(theme)

        def save_button(self) -> None:
            theme = self.theme_var.get()
            api_key = self.api_key_entry.get().strip()
            default_browser = self.browser_var.get()
            settings_dict = {
                'api_key': api_key,
                'default_browser': default_browser,
                'play_ding_on_completion': bool(self.play_ding.get()),
                'custom_llm_instructions': self.llm_instructions_text.get("1.0", "end-1c").strip(),
                'theme': theme
            }

            # Remove redundant theme change since it's already applied
            self.settings.save_settings_to_file(settings_dict)
            self.destroy()

        def open_advanced_settings(self):
            # Open the advanced settings window
            UI.AdvancedSettingsWindow(self)

    class MainWindow(ttk.Window):
        def change_theme(self, theme_name: str) -> None:
            self.style.theme_use(theme_name)

        def __init__(self):
            settings = Settings()
            settings_dict = settings.get_dict()
            theme = settings_dict.get('theme', 'superhero')

            try:
                super().__init__(themename=theme)
            except:
                super().__init__()  # https://github.com/AmberSahdev/Open-Interface/issues/35

            self.title('J AI Compute')

            # Set precise window dimensions
            window_width = 350  # Reduced to 300
            window_height = 750  # Set to 700

            # Set window size and minimum size
            self.geometry(f'{window_width}x{window_height}')
            self.minsize(window_width, window_height)

            # Ensure window doesn't expand unnecessarily
            self.grid_propagate(False)  # Prevent automatic resizing

            # Configure grid to be responsive
            self.grid_columnconfigure(0, weight=1)
            self.grid_columnconfigure(1, weight=0)  # Reduce weight for second column
            self.grid_rowconfigure(0, weight=0)  # Heading row

            # Create main frame with controlled expansion
            frame = ttk.Frame(self)
            frame.grid(
                row=0,
                column=0,
                columnspan=2,  # Span both columns
                sticky='nsew',
                padx=10,
                pady=10
            )

            # Carefully control frame's column and row configurations
            frame.grid_columnconfigure(0, weight=1)
            frame.grid_columnconfigure(1, weight=0)  # Minimal weight for second column
            frame.grid_rowconfigure(5, weight=1)  # Give weight to Output Log row

            # MP Queue to facilitate communication between UI and Core.
            # Put user requests received from UI text box into this queue which will then be dequeued in App to be sent
            # to core.
            self.user_request_queue = Queue()

            # Heading with centered text
            heading_label = ttk.Label(
                frame,
                text='Ask AI To Control Your Desktop',
                font=('Helvetica', 12, 'bold'),
                anchor='center'
            )
            heading_label.grid(
                column=0,
                row=1,
                columnspan=2,  # Span both columns
                sticky='ew',  # Expand horizontally
                pady=(0, 10)  # Add some padding below
            )

            # Input Command Frame - card-like border
            self.input_command_frame = ttk.LabelFrame(
                frame,
                text='Input Command Below:',
                bootstyle='primary'
            )
            self.input_command_frame.grid(
                row=2,
                column=0,
                columnspan=2,
                padx=10,
                pady=10,
                sticky='ew'
            )
            frame.grid_rowconfigure(2, weight=0)

            # Input Text Box - dynamically resizable
            self.input_text = ttk.Text(
                self.input_command_frame,
                height=2,  # Start with 2 rows
                wrap=ttk.WORD,
                font=('Arial', 16)  # Increased font size
            )
            self.input_text.grid(
                row=0,
                column=0,
                padx=10,
                pady=10,
                sticky='ew'
            )
            self.input_command_frame.grid_columnconfigure(0, weight=1)

            # Prevent newline on Enter key
            def prevent_newline(event):
                # Trigger submit instead of adding a newline
                self.execute_user_request()
                return 'break'  # Completely stop the default Enter key behavior

            # Bind Enter key to submit without newline
            self.input_text.bind('<Return>', prevent_newline)
            self.input_text.bind('<KP_Enter>', prevent_newline)
            self.input_text.bind('<Shift-Return>', lambda event: None)  # Allow Shift+Enter for actual newline if needed

            # Dynamic text box resizing
            def on_input_change(event):
                # Adjust text box height based on content
                lines = self.input_text.get('1.0', 'end-1c').count('\n') + 1
                current_height = self.input_text.winfo_height()
                self.input_text.configure(height=min(max(2, lines), 10))  # Limit max height to 10 rows

            self.input_text.bind('<KeyRelease>', on_input_change)

            # Submit Button - make responsive
            self.submit_button = ttk.Button(
                frame,
                text='Submit',
                command=self.execute_user_request
            )
            self.submit_button.grid(
                row=3,
                column=0,
                padx=(10, 5),
                pady=(5, 10),
                sticky='ew'
            )

            # Stop Button - make responsive
            self.stop_button = ttk.Button(
                frame,
                text='Stop',
                command=self.stop_previous_request
            )
            self.stop_button.grid(
                row=3,
                column=1,
                padx=(5, 10),
                pady=(5, 10),
                sticky='ew'
            )

            # Conversation Frame - make responsive
            self.conversation_frame = ttk.LabelFrame(
                frame,
                text='Conversations',  # Centered by default
                bootstyle='primary'
            )
            self.conversation_frame.grid(
                row=4,
                column=0,
                columnspan=2,
                padx=10,
                pady=10,
                sticky='nsew'
            )
            frame.grid_rowconfigure(4, weight=1)  # Allow conversation frame to expand

            # Conversation Text with Scrollbar
            conversation_text_frame = ttk.Frame(self.conversation_frame)
            conversation_text_frame.grid(
                row=0,
                column=0,
                padx=10,
                pady=10,
                sticky='nsew'
            )
            conversation_text_frame.grid_columnconfigure(0, weight=1)
            conversation_text_frame.grid_rowconfigure(0, weight=1)

            # Scrollbar for Conversation Text
            self.conversation_text_scrollbar = ttk.Scrollbar(conversation_text_frame)
            self.conversation_text_scrollbar.grid(
                row=0,
                column=1,
                sticky='ns'
            )

            # Conversation Text - make responsive with scrollbar
            self.conversation_text = ttk.Text(
                conversation_text_frame,
                wrap=ttk.WORD,
                font=('Arial', 16),  # Increased font size
                height=6,
                yscrollcommand=self.conversation_text_scrollbar.set
            )
            self.conversation_text.grid(
                row=0,
                column=0,
                sticky='nsew'
            )
            # Configure scrollbar
            self.conversation_text_scrollbar.config(command=self.conversation_text.yview)

            self.conversation_frame.grid_rowconfigure(0, weight=1)
            self.conversation_frame.grid_columnconfigure(0, weight=1)

            # Ensure the main frame can expand
            frame.grid_columnconfigure(0, weight=1)
            frame.grid_columnconfigure(1, weight=1)
            frame.grid_rowconfigure(5, weight=1)  # Critical: give weight to Output Log row

            # Output Log Frame - card-like border with full expansion
            self.output_log_frame = ttk.LabelFrame(
                frame,
                text='Output Log:',
                bootstyle='primary'
            )
            self.output_log_frame.grid(
                row=5,
                column=0,
                columnspan=2,  # Span across both columns
                padx=10,
                pady=10,
                sticky='nsew'  # Expand in all directions
            )

            # Ensure Output Log frame can expand
            self.output_log_frame.grid_columnconfigure(0, weight=1)
            self.output_log_frame.grid_rowconfigure(0, weight=1)

            # Output Log Text Frame with Scrollbar - full expansion
            output_log_text_frame = ttk.Frame(self.output_log_frame)
            output_log_text_frame.grid(
                row=0,
                column=0,
                padx=10,
                pady=10,
                sticky='nsew'  # Critical for resizing
            )
            output_log_text_frame.grid_columnconfigure(0, weight=1)  # Text box column
            output_log_text_frame.grid_rowconfigure(0, weight=1)  # Text box row

            # Scrollbar for Output Log
            self.output_log_scrollbar = ttk.Scrollbar(output_log_text_frame)
            self.output_log_scrollbar.grid(
                row=0,
                column=1,
                sticky='ns'
            )

            # Output Log Text Box - fully dynamic
            self.output_log_text = ttk.Text(
                output_log_text_frame,
                wrap=ttk.WORD,
                font=('Arial', 16),  # Larger font
                height=6,  # Initial height
                state='disabled',  # Read-only
                yscrollcommand=self.output_log_scrollbar.set
            )
            self.output_log_text.grid(
                row=0,
                column=0,
                sticky='nsew'  # Expand in all directions
            )

            # Configure scrollbar
            self.output_log_scrollbar.config(command=self.output_log_text.yview)

            # Settings Button - make responsive
            settings_button = ttk.Button(
                self,
                text='Settings',
                bootstyle="info-outline",
                command=self.open_settings
            )
            settings_button.grid(
                row=6,
                column=0,
                sticky='ew',
                padx=10,
                pady=10
            )

        def open_settings(self) -> None:
            UI.SettingsWindow(self)

        def stop_previous_request(self) -> None:
            # Interrupt currently running request by queueing a stop signal.
            self.user_request_queue.put('stop')

        def display_input(self) -> str:
            # Get the input and update the conversation display
            user_input = self.input_text.get("1.0", "end-1c")

            # Enable text widget to insert text
            self.conversation_text.configure(state='normal')

            # Insert user input if not empty at the TOP
            if user_input.strip():
                # Insert at the top
                self.conversation_text.insert('1.0', f'You: {user_input.strip()}\n')

                # Scroll to the top
                self.conversation_text.see('1.0')

            # Disable text widget to make it read-only
            self.conversation_text.configure(state='disabled')

            # Clear the input text box
            self.input_text.delete('1.0', ttk.END)

            return user_input.strip()

        def update_message(self, message: str) -> None:
            # Update the conversation text with AI replies only
            # Ensure thread safety when updating the Tkinter GUI.
            def update_text():
                # Comprehensive list of phrases to filter out
                filtered_phrases = [
                    'fetching instructions',
                    'waiting for',
                    'typing',
                    'pressing enter',
                    'loading',
                    'based on current state',
                    'processing',
                    'preparing',
                    'initializing',
                    'submitting',
                    'opening spotlight',
                    'selecting the top',
                    'thinking',
                    'analyzing',
                    'interpreting',
                    'generating',
                    'retrieving',
                    'parsing'
                ]

                # Check if the message should be filtered
                should_filter = any(
                    phrase in message.lower()
                    for phrase in filtered_phrases
                )

                # Enable text widget to insert text
                self.conversation_text.configure(state='normal')

                # Insert only meaningful AI responses at the TOP
                if message.strip() and not should_filter:
                    # Remove any previous "Thinking..." message
                    thinking_start = self.conversation_text.search('AI: Thinking...', '1.0', stopindex='end')
                    if thinking_start:
                        thinking_end = f"{thinking_start} lineend+1c"
                        self.conversation_text.delete(thinking_start, thinking_end)

                    # Insert at the top of the text
                    self.conversation_text.insert('1.0', f'AI: {message.strip()}\n')

                # Scroll to the top
                self.conversation_text.see('1.0')

                # Disable text widget to make it read-only
                self.conversation_text.configure(state='disabled')

                # Log filtered messages in Output Log
                if message.strip() and should_filter:
                    self.update_output_log(message)

                # Log status messages
                if 'Sending status:' in message:
                    status = message.split('Sending status:')[-1].strip()
                    self.log_system_action('Status', {'message': status})

            def show_thinking():
                # Enable text widget to insert text
                self.conversation_text.configure(state='normal')

                # Insert "Thinking..." message at the top
                self.conversation_text.insert('1.0', 'AI: Thinking...\n')

                # Scroll to the top
                self.conversation_text.see('1.0')

                # Disable text widget to make it read-only
                self.conversation_text.configure(state='disabled')

            if threading.current_thread() is threading.main_thread():
                # Show "Thinking..." immediately
                show_thinking()

                # Schedule the actual update
                self.conversation_text.after(1000, update_text)
            else:
                # For non-main threads, use after method to ensure thread safety
                self.conversation_text.after(0, show_thinking)
                self.conversation_text.after(1000, update_text)

        def update_output_log(self, message: str, screenshot: Image = None) -> None:
            def log_message():
                # Enable text widget to insert text
                self.output_log_text.configure(state='normal')

                # Prepare the log message
                log_entry = f"[{datetime.now().strftime('%H:%M:%S')}] {message.strip()}\n"

                # Insert technical messages at the TOP
                if message.strip():
                    self.output_log_text.insert('1.0', log_entry)

                # Insert screenshot thumbnail if provided
                if screenshot:
                    try:
                        # Resize screenshot to a thumbnail
                        thumbnail = screenshot.copy()
                        thumbnail.thumbnail((150, 150))  # Slightly larger thumbnail

                        # Convert to PhotoImage
                        photo = ImageTk.PhotoImage(thumbnail)

                        # Insert the image
                        self.output_log_text.image_create('1.0', image=photo)
                        self.output_log_text.insert('1.0', '\n')

                        # Keep a reference to prevent garbage collection
                        self.output_log_text.image = photo
                    except Exception as e:
                        # Log any image processing errors
                        self.output_log_text.insert('1.0', f"[ERROR] Failed to process screenshot: {str(e)}\n")

                # Scroll to the top
                self.output_log_text.see('1.0')

                # Disable text widget to make it read-only
                self.output_log_text.configure(state='disabled')

            # Ensure thread-safe execution
            if threading.current_thread() is threading.main_thread():
                log_message()
            else:
                self.output_log_text.after(0, log_message)

        def log_system_action(self, action_type: str, details: Union[dict, str, None] = None) -> None:
            """
            Log system actions and status messages to the Output Log

            :param action_type: Type of action being performed
            :param details: Optional details as dict, string, or None
            """
            def format_details(details):
                if isinstance(details, dict):
                    # Convert dictionary to a readable string
                    return ', '.join(f"{k}={v}" for k, v in details.items())
                elif isinstance(details, str):
                    return details
                return ''

            def log_action():
                # Prepare the log message
                timestamp = datetime.now().strftime('%H:%M:%S')
                formatted_details = format_details(details)

                # Construct log entry
                if formatted_details:
                    log_entry = f"[{timestamp}] {action_type}: {formatted_details}\n"
                else:
                    log_entry = f"[{timestamp}] {action_type}\n"

                # Thread-safe log update
                try:
                    self.output_log_text.configure(state='normal')
                    self.output_log_text.insert('1.0', log_entry)
                    self.output_log_text.see('1.0')
                    self.output_log_text.configure(state='disabled')
                except Exception as e:
                    print(f"Logging error: {e}")

            # Ensure thread-safe execution
            if threading.current_thread() is threading.main_thread():
                log_action()
            else:
                self.output_log_text.after(0, log_action)

        def mock_system_action(self, action_name: str, *args, **kwargs) -> None:
            """
            Generic mock method for system actions with flexible logging

            :param action_name: Name of the action being performed
            :param args: Positional arguments
            :param kwargs: Keyword arguments
            """
            # Combine args and kwargs for logging
            details = {}
            if args:
                details['args'] = args
            if kwargs:
                details.update(kwargs)

            # Log the action
            self.log_system_action(action_name, details)

        # Specific mock methods for common actions
        def mock_pyautogui_write(self, text: str, interval: float = 0.05) -> None:
            """Mock pyautogui.write with logging"""
            self.mock_system_action('pyautogui.write', text=text, interval=interval)

        def mock_pyautogui_press(self, keys: str) -> None:
            """Mock pyautogui.press with logging"""
            self.mock_system_action('pyautogui.press', keys=keys)

        def process_desktop_command(self, command: str) -> str:
            """
            Process desktop control commands using DesktopController

            Supported commands:
            - Open [application name]
            - Create [file type] (e.g., Word document, text file)
            - Search [query]
            - Copy [text]
            - Paste
            - Show message [title] [message]
            - Switch to [window title]
            """
            # Normalize command
            command = command.lower().strip()

            try:
                # Open application
                if command.startswith('open '):
                    app_name = command.replace('open ', '').strip()
                    return UI.DesktopController.open_application(app_name)

                # Create file
                elif command.startswith('create '):
                    file_type = command.replace('create ', '').strip()
                    return UI.DesktopController.create_file(file_type)

                # Web search
                elif command.startswith('search '):
                    query = command.replace('search ', '').strip()
                    return UI.DesktopController.search_web(query)

                # Copy text
                elif command.startswith('copy '):
                    text = command.replace('copy ', '').strip()
                    return UI.DesktopController.copy_text(text)

                # Paste text
                elif command == 'paste':
                    return UI.DesktopController.paste_text()

                # Show message
                elif command.startswith('show message '):
                    # Split into title and message
                    parts = command.replace('show message ', '').split(' ', 1)
                    title = parts[0] if len(parts) > 0 else 'Notification'
                    message = parts[1] if len(parts) > 1 else ''
                    return UI.DesktopController.show_message(title, message)

                # Switch window
                elif command.startswith('switch to '):
                    window_title = command.replace('switch to ', '').strip()
                    return UI.DesktopController.switch_window(window_title)

                # Unrecognized command
                else:
                    return "Sorry, I don't understand that command. Try: Open Chrome, Create Word document, Search something, Copy text, Paste, Show message, or Switch to a window."

            except Exception as e:
                return f"Error executing command: {str(e)}"

        def execute_user_request(self, event=None) -> None:
            # Puts the user request received from the UI into the MP queue being read in App to be sent to Core.
            user_request = self.display_input()

            # Process desktop control commands
            if user_request:
                try:
                    desktop_response = self.process_desktop_command(user_request)

                    # Log the command and response
                    self.log_system_action('Desktop Command', {
                        'command': user_request,
                        'response': desktop_response
                    })

                    # Update conversation with response
                    self.update_message(desktop_response)
                except Exception as e:
                    error_msg = f"Error processing command: {str(e)}"
                    self.update_message(error_msg)
